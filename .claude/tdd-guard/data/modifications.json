{
  "session_id": "a4111045-a8c3-4e1a-84a4-f8c9be0219aa",
  "transcript_path": "/home/thomas/.claude/projects/-ssdpool-thomas-projects-africa-quiz/a4111045-a8c3-4e1a-84a4-f8c9be0219aa.jsonl",
  "hook_event_name": "PreToolUse",
  "tool_name": "Write",
  "tool_input": {
    "file_path": "/ssdpool/thomas/projects/africa_quiz/main.py",
    "content": "\"\"\"Africa Geography Quiz Game - Main Application.\"\"\"\n\nimport tkinter as tk\nfrom pathlib import Path\nfrom africa_quiz.projection import CoordinateProjector\nfrom africa_quiz.quiz import QuizManager\n\n\nclass AfricaQuizApp:\n    \"\"\"Main application class for the Africa Geography Quiz Game.\"\"\"\n    \n    def __init__(self) -> None:\n        \"\"\"Initialize the quiz application.\"\"\"\n        # Application constants\n        self.CANVAS_WIDTH = 800\n        self.CANVAS_HEIGHT = 600\n        \n        # Colors\n        self.CORRECT_COLOR = \"#00FF00\"  # Green\n        self.INCORRECT_COLOR = \"#FF0000\"  # Red\n        \n        # Initialize GUI\n        self.root = tk.Tk()\n        self.root.title(\"Africa Geography Quiz Game\")\n        self.root.resizable(False, False)  # Fixed size window\n        \n        # Create prompt label\n        self.prompt_label = tk.Label(\n            self.root,\n            text=\"Loading...\",\n            font=(\"Arial\", 16, \"bold\"),\n            pady=10\n        )\n        self.prompt_label.pack()\n        \n        # Create canvas\n        self.canvas = tk.Canvas(\n            self.root,\n            width=self.CANVAS_WIDTH,\n            height=self.CANVAS_HEIGHT,\n            bg=\"lightblue\"\n        )\n        self.canvas.pack()\n        \n        # Initialize quiz components\n        self._setup_quiz()\n        \n        # Draw initial map\n        self._draw_map()\n        \n        # Bind click event\n        self.canvas.bind(\"<Button-1>\", self._on_canvas_click)\n        \n        # Update prompt\n        self._update_prompt()\n    \n    def _setup_quiz(self) -> None:\n        \"\"\"Set up the quiz manager and projector.\"\"\"\n        # Load GeoJSON data\n        geojson_path = Path(\"africa.geojson\")\n        \n        # Calculate bounding box and create projector\n        with geojson_path.open('r') as f:\n            import json\n            geojson_data = json.load(f)\n        \n        bbox = CoordinateProjector.calculate_bbox(geojson_data)\n        self.projector = CoordinateProjector(bbox, self.CANVAS_WIDTH, self.CANVAS_HEIGHT)\n        \n        # Create quiz manager\n        self.quiz_manager = QuizManager(str(geojson_path), self.projector)\n        \n        # Pre-calculate country shapes for drawing\n        self.country_shapes = {}\n        self.colored_countries = {}  # Track colored countries\n        \n        for feature in geojson_data['features']:\n            country_name = feature['properties']['name']\n            coords = feature['geometry']['coordinates']\n            \n            # Convert all coordinates to canvas coordinates\n            canvas_coords = []\n            if feature['geometry']['type'] == 'Polygon':\n                for ring in coords:\n                    ring_coords = []\n                    for lon, lat in ring:\n                        x, y = self.projector.geo_to_canvas(lon, lat)\n                        ring_coords.extend([x, y])\n                    canvas_coords.append(ring_coords)\n            elif feature['geometry']['type'] == 'MultiPolygon':\n                for polygon in coords:\n                    for ring in polygon:\n                        ring_coords = []\n                        for lon, lat in ring:\n                            x, y = self.projector.geo_to_canvas(lon, lat)\n                            ring_coords.extend([x, y])\n                        canvas_coords.append(ring_coords)\n            \n            self.country_shapes[country_name] = canvas_coords\n    \n    def _draw_map(self) -> None:\n        \"\"\"Draw the Africa map on canvas.\"\"\"\n        self.canvas.delete(\"all\")  # Clear canvas\n        \n        # Draw all countries\n        for country_name, coords_list in self.country_shapes.items():\n            fill_color = self.colored_countries.get(country_name, \"\")\n            \n            # Draw each polygon/ring\n            for ring_coords in coords_list:\n                if len(ring_coords) >= 6:  # Need at least 3 points (6 coordinates)\n                    self.canvas.create_polygon(\n                        ring_coords,\n                        outline=\"black\",\n                        fill=fill_color,\n                        width=1\n                    )\n                    \n                    # Add country label if colored\n                    if fill_color:\n                        self._add_country_label(country_name, ring_coords)\n    \n    def _add_country_label(self, country_name: str, coords: list) -> None:\n        \"\"\"Add country name label to the center of the polygon.\"\"\"\n        if len(coords) < 4:\n            return\n            \n        # Calculate centroid for label placement\n        x_coords = coords[::2]  # X coordinates\n        y_coords = coords[1::2]  # Y coordinates\n        \n        center_x = sum(x_coords) // len(x_coords)\n        center_y = sum(y_coords) // len(y_coords)\n        \n        self.canvas.create_text(\n            center_x, center_y,\n            text=country_name,\n            fill=\"black\",\n            font=(\"Arial\", 8, \"bold\")\n        )\n    \n    def _update_prompt(self) -> None:\n        \"\"\"Update the country prompt label.\"\"\"\n        current_country = self.quiz_manager.get_current_country()\n        self.prompt_label.config(text=f\"Click on: {current_country}\")\n    \n    def _on_canvas_click(self, event) -> None:\n        \"\"\"Handle canvas click events.\"\"\"\n        # Process the click through quiz manager\n        is_correct, clicked_country = self.quiz_manager.handle_click(event.x, event.y)\n        \n        if clicked_country:\n            # Color the country based on correctness\n            if is_correct:\n                self.colored_countries[clicked_country] = self.CORRECT_COLOR\n            else:\n                # Color the correct country red for incorrect answers\n                current_country = self.quiz_manager.get_current_country()\n                self.colored_countries[current_country] = self.INCORRECT_COLOR\n            \n            # Redraw map with updated colors\n            self._draw_map()\n            \n            # Move to next country or start new round\n            self._advance_quiz()\n            \n            # Update prompt\n            self._update_prompt()\n    \n    def _advance_quiz(self) -> None:\n        \"\"\"Advance to the next country or start new round.\"\"\"\n        if self.quiz_manager.is_round_complete():\n            # Clear colors and start new round\n            self.colored_countries.clear()\n            self.quiz_manager.start_new_round()\n            self._draw_map()\n        else:\n            # Move to next country in current round\n            self.quiz_manager.current_country_index += 1\n    \n    def run(self) -> None:\n        \"\"\"Run the application main loop.\"\"\"\n        self.root.mainloop()\n\n\ndef main() -> None:\n    \"\"\"Main application entry point.\"\"\"\n    try:\n        app = AfricaQuizApp()\n        app.run()\n    except FileNotFoundError as e:\n        print(f\"Error: Could not find africa.geojson file. {e}\")\n    except Exception as e:\n        print(f\"Error starting application: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"
  }
}